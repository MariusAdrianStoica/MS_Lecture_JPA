package se.lexicon.ms_lecture_jpa.model;

import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*; // JPA specification in persistence from -> javax (java extension)
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.UUID;

@Entity //add @Entity in front of the class -> in order to define this Java class as a DB table
//@Table(name = "TBL_STUDENTS") // @Table(name = "") -> we can choose the name for the DB table
public class Student {
/*
    @Id // @Id -> the next field (studentID) will be the primary key in the DB table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // column is autoincrement for "int" values
    @Column(name = "STD_Id", updatable = false)
    //to give a new name to the column in the DB table
    //updatable = false -> user can not update the value of that field (it is primary key)
    private int studentId;

 */
    @Id
    @GeneratedValue(generator = "UUID") // String is not a sequencer -> we use <generator = "UUID"> +
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private String id;
    @Column(nullable = false, length = 100) // field can not be null -> String length value is 255
    private String firstName;
    @Column(nullable = false,  length = 100)
    private String lastName;
    @Column(nullable = false,  length = 100, unique = true) // unique value of field
    private String email;
    @Column(nullable = false)
    private LocalDate birthDate;

    private boolean status;
    private LocalDateTime registrationDate;

    //constructors

    public Student() {
        this.status = true;     //default value when user create a Student
        this.registrationDate = LocalDateTime.now(); // default value now()
    }


    //setter & getter

    public String getId() {
        return id;
    }

    //we can use no setter for id because the default value will be autogenerated
    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
    }

    public boolean isStatus() {
        return status;
    }

    //we can use no setter for status because the default value will be true
    public void setStatus(boolean status) {
        this.status = status;
    }


    public LocalDateTime getRegistrationDate() {
        return registrationDate;
    }

    // we can use no setter for registrationDate because we can not update it
    // -> it is default value now()
    public void setRegistrationDate(LocalDateTime registrationDate) {
        this.registrationDate = registrationDate;
    }


    //equal & hashCode

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Student student = (Student) o;
        return status == student.status && Objects.equals(id, student.id) && Objects.equals(firstName, student.firstName) && Objects.equals(lastName, student.lastName) && Objects.equals(email, student.email) && Objects.equals(birthDate, student.birthDate) && Objects.equals(registrationDate, student.registrationDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, firstName, lastName, email, birthDate, status, registrationDate);
    }


    // toString


    @Override
    public String toString() {
        return "Student{" +
                "id='" + id + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", birthDate=" + birthDate +
                ", status=" + status +
                ", registrationDate=" + registrationDate +
                '}';
    }
// now the DB will be created, but we need to define the connection setting
// -> in application.properties (resources package)
}
