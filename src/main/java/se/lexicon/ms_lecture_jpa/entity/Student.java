package se.lexicon.ms_lecture_jpa.entity;

import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*; // JPA specification in persistence from -> javax (java extension)
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

//if we define student as a DB
// -> it is better to change the name of the package from "model" to "entity"

@Entity //add @Entity in front of the class -> in order to define this Java class as a DB table
//@Table(name = "TBL_STUDENTS") // @Table(name = "") -> we can choose the name for the DB table
public class Student {
/*
    @Id // @Id -> the next field (studentID) will be the primary key in the DB table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // column is autoincrement for "int" values
    @Column(name = "STD_Id", updatable = false)
    //to give a new name to the column in the DB table
    //updatable = false -> user can not update the value of that field (it is primary key)
    private int studentId;

 */
    @Id
    @GeneratedValue(generator = "UUID") // String is not a sequencer -> we use <generator = "UUID"> +
    @GenericGenerator(name = "UUID", strategy = "org.hibernate.id.UUIDGenerator")
    private String id;
    @Column(nullable = false, length = 100) // field can not be null -> String length value is 255
    private String firstName;
    @Column(nullable = false,  length = 100)
    private String lastName;
    @Column(nullable = false,  length = 100, unique = true) // unique value of field
    private String email;
    @Column(nullable = false)
    private LocalDate birthDate;

    private boolean status;
    private LocalDateTime registrationDate;

    @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})
    //Address without a Student has no meaning,
    // ->that's why when user remove a Student, we must remove also his address
    // technique is called CASCADE (after @OneToOne)
    // PERSIST & REMOVE -> when we Create or Remove Student, we have to handle also the address
    // MERGE & REFRESH -> when we update & when we modify the address, we need also to refresh the student
    // DETACH -> when we want to detach the student from the address


    @JoinColumn(name = "address_id")
    // address_id in table Student is the same with id from table Address
    private Address address;
    // we created a new field to make connection between Student and address

    @OneToMany(mappedBy = "borrower", orphanRemoval = true)
    //if we want to customize @OneToMany - Cascade.DETACH, cascade.REFRESH - or nothing
    //if we add Cascade.Remove -> when a Student is removed, all the borrowed books are removed
    //-> that's why we use orphanRemoval

    private List<Book> borrowedBooks;
    // because we have a list, it is better if we write methods (before hashCode)
    // to borrowBook & returnBook



    //in order to use Bidirectional , we need to use mappedBy
    @ManyToMany(mappedBy = "participants")
    private List<Course> enrolledCourses;

    @ManyToMany()
    @JoinTable(name = "students_competences"
            , joinColumns = @JoinColumn(name = "student_id")
            , inverseJoinColumns = @JoinColumn(name = "competence_id")
    )
    private Set<Competence> competences;


    //constructors

    public Student() {
        this.status = true;     //default value when user create a Student
        this.registrationDate = LocalDateTime.now(); // default value now()
    }

    public Student(String firstName, String lastName, String email, LocalDate birthDate) {
        this();//in order to reuse the setting from previous constructor(status, regDate)
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.birthDate = birthDate;
    }

    public Student(String firstName, String lastName, String email, LocalDate birthDate, Address address) {
        this();
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.birthDate = birthDate;
        setAddress(address);
    }

    //setter & getter

    public String getId() {
        return id;
    }

    //we can use no setter for id because the default value will be autogenerated
    public void setId(String id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getBirthDate() {
        return birthDate;
    }

    public void setBirthDate(LocalDate birthDate) {
        this.birthDate = birthDate;
    }

    public boolean isStatus() {
        return status;
    }

    //we can use no setter for status because the default value will be true
    public void setStatus(boolean status) {
        this.status = status;
    }


    public LocalDateTime getRegistrationDate() {
        return registrationDate;
    }

    // we can use no setter for registrationDate because we can not update it
    // -> it is default value now()
    public void setRegistrationDate(LocalDateTime registrationDate) {
        this.registrationDate = registrationDate;
    }

    public Address getAddress() {
        return address;
    }

    public void setAddress(Address address) {
        //bi directional
        if (address!= null) address.setStudent(this);
        this.address = address;
    }

    public List<Book> getBorrowedBooks() {
        return borrowedBooks;
    }

    public void setBorrowedBooks(List<Book> borrowedBooks) {
        this.borrowedBooks = borrowedBooks;
    }


    public List<Course> getEnrolledCourses() {
        if (enrolledCourses == null) enrolledCourses = new ArrayList<>();
        return enrolledCourses;
    }

    public void setEnrolledCourses(List<Course> enrolledCourses) {
        this.enrolledCourses = enrolledCourses;
    }


    public Set<Competence> getCompetences() {
        if (competences == null) competences = new HashSet<>();
        return competences;
    }

    public void setCompetences(Set<Competence> competences) {
        this.competences = competences;
    }

    public void borrowBook(Book book){
        if(book == null) throw new IllegalArgumentException("book data was null");
        if (borrowedBooks == null) borrowedBooks=new ArrayList<>();
        borrowedBooks.add(book);
        //because it is a bidirectional relation, we need to say to the other side - who borrowed the book
        book.setBorrower(this);

    }

    public void returnBook(Book book){
        if(book == null) throw new IllegalArgumentException("book data was null");
        if (borrowedBooks != null){
            book.setBorrower(null); //when a book is returned, it will not have a borrower
            borrowedBooks.remove(book);
        }


    }

    public void enrollCourse(Course course){
        if (course == null) throw new IllegalArgumentException("Course data was null");
        if(enrolledCourses == null) enrolledCourses = new ArrayList<>();

        enrolledCourses.add(course);
        course.getParticipants().add(this);

    }

    public void unEnrollCourse(Course course){
        if (course == null) throw new IllegalArgumentException("Course data was null");

        course.getParticipants().remove(this);
        enrolledCourses.remove(course);
    }

    public void addCompetence(Competence competence) {
        if (competence == null) throw new IllegalArgumentException("competence is null");
        if (competences == null) competences = new HashSet<>();
        if (!competence.getStudents().contains(this)) {
            competences.add(competence);
        }

    }

    public void removeCompetence(Competence competence) {
        if (competence == null) throw new IllegalArgumentException("competence is null");
        if (competences == null) competences = new HashSet<>();
        competence.getStudents().remove(this);
        competences.remove(competence);
    }

    //equal & hashCode

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Student student = (Student) o;
        return status == student.status && Objects.equals(id, student.id) && Objects.equals(firstName, student.firstName) && Objects.equals(lastName, student.lastName) && Objects.equals(email, student.email) && Objects.equals(birthDate, student.birthDate) && Objects.equals(registrationDate, student.registrationDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, firstName, lastName, email, birthDate, status, registrationDate);
    }


    // toString


    @Override
    public String toString() {
        return "Student{" +
                "id='" + id + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", birthDate=" + birthDate +
                ", status=" + status +
                ", registrationDate=" + registrationDate +
                '}';
    }
// now the DB will be created, but we need to define the connection setting
// -> in application.properties (resources package)
}
